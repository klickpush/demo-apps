// Generated by CoffeeScript 1.3.3
(function() {
  var UserLocationModel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  UserLocationModel = (function(_super) {

    __extends(UserLocationModel, _super);

    function UserLocationModel() {
      return UserLocationModel.__super__.constructor.apply(this, arguments);
    }

    UserLocationModel.prototype.initialize = function() {
      return this.userHasDenied = false;
    };

    UserLocationModel.prototype.getLocation = function(callback) {
      var geolocationCallback,
        _this = this;
      if (this.browserSupport() && this.havePermission() && this.hasLocation() === false) {
        geolocationCallback = function(position) {
          _this.set('latitude', position.coords.latitude);
          _this.set('longitude', position.coords.longitude);
          return callback();
        };
        return navigator.geolocation.getCurrentPosition(geolocationCallback);
      } else {
        return callback();
      }
    };

    UserLocationModel.prototype.browserSupport = function() {
      if (navigator.geolocation) {
        return true;
      } else {
        return false;
      }
    };

    UserLocationModel.prototype.havePermission = function() {
      if (this.userHasDenied) {
        return false;
      } else {
        return true;
      }
    };

    UserLocationModel.prototype.hasLocation = function() {
      if (this.get('latitude') && this.get('longitude')) {
        return true;
      } else {
        return false;
      }
    };

    return UserLocationModel;

  })(Backbone.Model);

  (typeof exports !== "undefined" && exports !== null ? exports : this).UserLocationModel = UserLocationModel;

}).call(this);
